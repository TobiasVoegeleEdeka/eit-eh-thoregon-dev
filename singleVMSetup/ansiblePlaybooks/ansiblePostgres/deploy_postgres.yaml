---
- name: Deploy PostgreSQL in a Docker container
  hosts: database_servers
  become: yes
  # Vault-Datei einbinden
  vars_files:
    - ../ansibleVault/vault.yml

  # Variablen für PostgreSQL-Credentials
  vars:
    db_name: "{{ db_name }}"
    db_user: "{{ db_user }}"
    db_password: "{{ vault_postgres_password }}"

  tasks:
    # --- 1. System-Voraussetzungen installieren ---
    - name: Install prerequisite packages for Docker
      ansible.builtin.apt:
        name:
          - apt-transport-https
          - ca-certificates
          - curl
          - gnupg
          - lsb-release
          - python3-pip # Stellt sicher, dass pip verfügbar ist
        state: present
        update_cache: yes

    # --- 2. Docker Engine sauber installieren (Idempotent) ---
    - name: Create directory for Docker's GPG key
      ansible.builtin.file:
        path: /etc/apt/keyrings
        state: directory
        mode: '0755'

    # NEU: Alten Schlüssel entfernen, um Konflikte zu vermeiden
    - name: Remove old Docker GPG key if it exists
      ansible.builtin.file:
        path: /etc/apt/keyrings/docker.gpg
        state: absent

    # KORRIGIERT: Schlüssel als .asc herunterladen und dann de-armorieren
    - name: Download Docker's official GPG key
      ansible.builtin.get_url:
        url: https://download.docker.com/linux/ubuntu/gpg
        dest: /tmp/docker.asc # Temporärer Download-Ort
        mode: '0644'
        force: yes

    - name: De-armor the GPG key
      ansible.builtin.command:
        cmd: gpg --dearmor -o /etc/apt/keyrings/docker.gpg /tmp/docker.asc
      args:
        creates: /etc/apt/keyrings/docker.gpg # Führt den Befehl nur aus, wenn die Zieldatei nicht existiert

    - name: Clean up temporary GPG key file
      ansible.builtin.file:
        path: /tmp/docker.asc
        state: absent

    # KORRIGIERT: APT-Repository mit dem korrekten Schlüsselpfad (.gpg) hinzufügen
    - name: Add Docker repository
      ansible.builtin.apt_repository:
        repo: >
          deb [arch=amd64 signed-by=/etc/apt/keyrings/docker.gpg]
          https://download.docker.com/linux/ubuntu
          {{ ansible_distribution_release }} stable
        state: present
        filename: docker # Stellt sicher, dass der Dateiname konsistent ist

    - name: Install Docker Engine and Docker Compose plugin
      ansible.builtin.apt:
        name:
          - docker-ce
          - docker-ce-cli
          - containerd.io
          - docker-compose-plugin
        state: present
        update_cache: yes # Cache nach Hinzufügen des Repos aktualisieren

    # --- 3. Python-Abhängigkeiten für Ansible Docker-Module installieren ---
    - name: Install Docker SDK for Python (required for Ansible modules)
      ansible.builtin.pip:
        name: docker
        state: present

    # --- 4. Docker Compose Projekt aufsetzen und starten ---
    - name: Create a directory for the postgres service
      ansible.builtin.file:
        path: /opt/postgres
        state: directory
        mode: '0755'

    - name: Copy Docker Compose file to the remote host
      ansible.builtin.template:
        src: templates/docker-compose-postgres.yml.j2
        dest: /opt/postgres/docker-compose.yml
        mode: '0644'
      # Variablen für das Template übergeben
      vars:
        postgres_db: "{{ db_name }}"
        postgres_user: "{{ db_user }}"
        postgres_password: "{{ db_password }}"

    - name: Start the postgres container using Docker Compose
      community.docker.docker_compose_v2:
        project_src: /opt/postgres
        state: present # Startet die Services, wenn sie nicht laufen.