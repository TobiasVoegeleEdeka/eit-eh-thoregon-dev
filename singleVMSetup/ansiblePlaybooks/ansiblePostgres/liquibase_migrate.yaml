---
- name: Run Liquibase Migrations for PostgreSQL
  hosts: database_servers
  become: true
  vars_files:
    - ../ansibleVault/vault.yml  # Path to encrypted vault file
  vars:
    container_name: "mein_postgres"  # Matches PostgreSQL container name
    postgres_db: "{{ vault_postgres_db_name | default('maildb') }}"
    postgres_user: "{{ vault_postgres_user | default('mailuser') }}"
    postgres_password: "{{ vault_postgres_password | default('securepassword123') }}"
    project_dir: /opt/postgres  # Base directory for Liquibase files

  tasks:
    - name: Create Liquibase directory structure
      ansible.builtin.file:
        path: "{{ item }}"
        state: directory
        mode: "0755"
      loop:
        - "{{ project_dir }}/liquibase"
        - "{{ project_dir }}/liquibase/changelogs"

    - name: Copy Liquibase master.xml
      ansible.builtin.copy:
        src: "{{ playbook_dir }}/files/liquibase/changelogs/master.xml"
        dest: "{{ project_dir }}/liquibase/changelogs/master.xml"
        mode: "0644"

    - name: Copy Liquibase V1_create_email_table.xml
      ansible.builtin.copy:
        src: "{{ playbook_dir }}/files/liquibase/changelogs/V1_create_email_table.xml"
        dest: "{{ project_dir }}/liquibase/changelogs/V1_create_email_table.xml"
        mode: "0644"

    - name: Wait for PostgreSQL to be ready
      community.docker.docker_container_exec:
        container: "{{ container_name }}"
        command: "pg_isready -U {{ postgres_user }} -d {{ postgres_db }} -h localhost -t 30"
      register: pg_ready
      until: pg_ready is not failed
      retries: 10
      delay: 5
      ignore_errors: true

    - name: Run Liquibase migration
      community.docker.docker_container:
        name: liquibase-migration
        image: liquibase/liquibase
        volumes:
          - "{{ project_dir }}/liquibase/changelogs:/liquibase/changelogs"
        command: >
          update
          --changeLogFile=/liquibase/changelogs/master.xml
          --url=jdbc:postgresql://{{ container_name }}:5432/{{ postgres_db }}
          --username={{ postgres_user }}
          --password={{ postgres_password }}
        auto_remove: true
        networks:
          - name: default
      register: liquibase_result

    - name: Check Liquibase migration result
      ansible.builtin.fail:
        msg: "Liquibase migration failed"
      when: liquibase_result is failed

    - name: Verify database tables
      block:
        - name: Check if emails table exists
          community.postgresql.postgresql_query:
            login_user: "{{ postgres_user }}"
            login_password: "{{ postgres_password }}"
            db: "{{ postgres_db }}"
            query: |
              SELECT EXISTS (
                SELECT FROM information_schema.tables 
                WHERE table_name = 'emails'
              )
          register: table_exists
          retries: 3
          delay: 5
          until: table_exists is succeeded

        - name: Show table status
          ansible.builtin.debug:
            msg: "Emails table exists: {{ table_exists.query_result[0]['exists'] }}"
      when: liquibase_result is succeeded